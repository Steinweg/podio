#ifndef ${name}_H
#define ${name}_H
$includes

#include <vector>
#include <iostream>
#include <iomanip>

#include "podio/ObjectID.h"

// $description
// author: $author

//forward declarations
$forward_declarations

#include "${name}Const.h"
#include "${name}Obj.h"

${namespace_open}

class ${name}Collection;
class ${name}CollectionIterator;
class Const${name};

class ${name} {

  friend ${name}Collection;
  friend ${name}CollectionIterator;
  friend Const${name};

public:

  /// default constructor
  ${name}();
${constructor_declaration}
  /// constructor from existing ${name}Obj
  ${name}(${name}Obj* obj);
  /// copy constructor
  ${name}(const ${name}& other);
  /// copy-assignment operator
  ${name}& operator=(const ${name}& other);
  /// support cloning (deep-copy)
  ${name} clone() const;
  /// destructor
  ~${name}();
  /// conversion to const object
  operator Const${name} () const;

public:
 
$getter_declarations
$setter_declarations
$relation_declarations
$extracode_declarations
  /// check whether the object is actually available
  bool isAvailable() const;
  /// disconnect from ${name}Obj instance
  void unlink(){m_obj = nullptr;}

  bool operator==(const ${name}& other) const {
    return (m_obj==other.m_obj);
  }

  bool operator==(const Const${name}& other) const;

// less comparison operator, so that objects can be e.g. stored in sets.
//  friend bool operator< (const ${name}& p1,
//       const ${name}& p2 );
  bool operator<(const ${name}& other) const { return m_obj < other.m_obj  ; }

  const podio::ObjectID getObjectID() const;
private:
  ${name}Obj* m_obj;


${namespace_close}
};

inline std::ostream& operator<<( std::ostream& o, const ${name}& value ){

       /* checks how to formate an integer variable so that you don't
          use up useless space when printing them out. */

       int highestLengthOfInts = 0;
       int integerCollection [${numberOfInts}];
       int j = 0;
       
       ${arraydeclaration}

       for(unsigned int i = 0; i < ${numberOfInts}; i++){
		j = 0;
		while(integerCollection[i] != 0){
			j++;
			integerCollection[i] = integerCollection[i] / 10;
		}

		// j ist now equal to the length of an given Integer

		if (j > highestLengthOfInts){
			highestLengthOfInts = j;
		}
	}

	// after this for loop higestLengthOfInts is equal to the length of the longest Integer of one Object

    o ${printingstring} ;
   return o ;
}

#endif

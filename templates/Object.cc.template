// datamodel specific includes
#include "${name}.h"
#include "${name}Const.h"
#include "${name}Obj.h"
#include "${name}Data.h"
#include "${name}Collection.h"
#include <iostream>
$includes_cc

${namespace_open}

${name}::${name}() : m_obj(new ${name}Obj()){
 m_obj->acquire();
}

${constructor_implementation}

${name}::${name}(const ${name}& other) : m_obj(other.m_obj) {
  m_obj->acquire();
}

${name}& ${name}::operator=(const ${name}& other) {
  if ( m_obj != nullptr) m_obj->release();
  m_obj = other.m_obj;
  return *this;
}

${name}::${name}(${name}Obj* obj) : m_obj(obj){
  if(m_obj != nullptr)
    m_obj->acquire();
}

${name} ${name}::clone() const {
  return {new ${name}Obj(*m_obj)};
}

${name}::~${name}(){
  if ( m_obj != nullptr) m_obj->release();
}

${name}::operator Const${name}() const {return Const${name}(m_obj);}


$getters
$setters

$relations
$extracode
bool  ${name}::isAvailable() const {
  if (m_obj != nullptr) {
    return true;
  }
  return false;
}

const podio::ObjectID ${name}::getObjectID() const {
  if (m_obj !=nullptr){
    return m_obj->id;
  }
  return podio::ObjectID{-2,-2};
}

int getHighestLengthOfInts(${name} value) const {

	/* checks how to formate an integer variable so that you don't
           use up useless space when printing them out. */

       int highestLengthOfInts = 0;
       int integerCollection [${numberOfInts}];
       int j = 0;
       
       ${arraydeclaration}

       for(unsigned int i = 0; i < ${numberOfInts}; i++){
		j = 0;
		while(integerCollection[i] != 0){
			j++;
			integerCollection[i] = integerCollection[i] / 10;
		}

		// j ist now equal to the length of an given Integer

		if (j > highestLengthOfInts){
			highestLengthOfInts = j;
		}
	}

	return highestLengthOfInts;

	// after this for loop higestLengthOfInts is equal 
	// to the length of the longest Integer of one Object

}


bool ${name}::operator==(const Const${name}& other) const {
  return (m_obj==other.m_obj);
}


//bool operator< (const ${name}& p1, const ${name}& p2 ) {
//  if( p1.m_containerID == p2.m_containerID ) {
//    return p1.m_index < p2.m_index;
//  } else {
//    return p1.m_containerID < p2.m_containerID;
//  }
//}

${namespace_close}
